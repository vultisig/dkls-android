/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.silencelaboratories.godkls;

public class godkls implements godklsConstants {
  public static void tss_buffer_free(tss_buffer buf) {
    godklsJNI.tss_buffer_free(tss_buffer.getCPtr(buf), buf);
  }

  public static lib_error dkls_keygen_setupmsg_new(SWIGTYPE_p_uint32_t threshold, go_slice key_id, go_slice ids, tss_buffer setup_msg) {
    return lib_error.swigToEnum(godklsJNI.dkls_keygen_setupmsg_new(SWIGTYPE_p_uint32_t.getCPtr(threshold), go_slice.getCPtr(key_id), key_id, go_slice.getCPtr(ids), ids, tss_buffer.getCPtr(setup_msg), setup_msg));
  }

  public static lib_error dkls_keygen_session_from_setup(go_slice setup, go_slice id, Handle hnd) {
    return lib_error.swigToEnum(godklsJNI.dkls_keygen_session_from_setup(go_slice.getCPtr(setup), setup, go_slice.getCPtr(id), id, Handle.getCPtr(hnd), hnd));
  }

  public static lib_error dkls_key_refresh_session_from_setup(go_slice setup, go_slice id, Handle old_keyshare, Handle hnd) {
    return lib_error.swigToEnum(godklsJNI.dkls_key_refresh_session_from_setup(go_slice.getCPtr(setup), setup, go_slice.getCPtr(id), id, Handle.getCPtr(old_keyshare), old_keyshare, Handle.getCPtr(hnd), hnd));
  }

  public static lib_error dkls_keygen_session_input_message(Handle session, go_slice message, SWIGTYPE_p_int32_t finished) {
    return lib_error.swigToEnum(godklsJNI.dkls_keygen_session_input_message(Handle.getCPtr(session), session, go_slice.getCPtr(message), message, SWIGTYPE_p_int32_t.getCPtr(finished)));
  }

  public static lib_error dkls_keygen_session_output_message(Handle session, tss_buffer message) {
    return lib_error.swigToEnum(godklsJNI.dkls_keygen_session_output_message(Handle.getCPtr(session), session, tss_buffer.getCPtr(message), message));
  }

  public static lib_error dkls_keygen_session_message_receiver(Handle session, go_slice message, SWIGTYPE_p_uint32_t index, tss_buffer receiver) {
    return lib_error.swigToEnum(godklsJNI.dkls_keygen_session_message_receiver(Handle.getCPtr(session), session, go_slice.getCPtr(message), message, SWIGTYPE_p_uint32_t.getCPtr(index), tss_buffer.getCPtr(receiver), receiver));
  }

  public static lib_error dkls_keygen_session_finish(Handle session, Handle keyshare) {
    return lib_error.swigToEnum(godklsJNI.dkls_keygen_session_finish(Handle.getCPtr(session), session, Handle.getCPtr(keyshare), keyshare));
  }

  public static lib_error dkls_keygen_session_free(Handle session) {
    return lib_error.swigToEnum(godklsJNI.dkls_keygen_session_free(Handle.getCPtr(session), session));
  }

  public static lib_error dkls_presign_from_bytes(go_slice buf, Handle hnd) {
    return lib_error.swigToEnum(godklsJNI.dkls_presign_from_bytes(go_slice.getCPtr(buf), buf, Handle.getCPtr(hnd), hnd));
  }

  public static lib_error dkls_presign_to_bytes(Handle share, tss_buffer buf) {
    return lib_error.swigToEnum(godklsJNI.dkls_presign_to_bytes(Handle.getCPtr(share), share, tss_buffer.getCPtr(buf), buf));
  }

  public static lib_error dkls_presign_session_id(Handle share, tss_buffer buf) {
    return lib_error.swigToEnum(godklsJNI.dkls_presign_session_id(Handle.getCPtr(share), share, tss_buffer.getCPtr(buf), buf));
  }

  public static lib_error dkls_key_export_receiver_new(Handle share, go_slice ids, tss_buffer setup_msg, Handle session) {
    return lib_error.swigToEnum(godklsJNI.dkls_key_export_receiver_new(Handle.getCPtr(share), share, go_slice.getCPtr(ids), ids, tss_buffer.getCPtr(setup_msg), setup_msg, Handle.getCPtr(session), session));
  }

  public static lib_error dkls_key_export_receiver_input_message(Handle session, go_slice message, SWIGTYPE_p_int32_t finished) {
    return lib_error.swigToEnum(godklsJNI.dkls_key_export_receiver_input_message(Handle.getCPtr(session), session, go_slice.getCPtr(message), message, SWIGTYPE_p_int32_t.getCPtr(finished)));
  }

  public static lib_error dkls_key_export_receiver_finish(Handle session, tss_buffer secret) {
    return lib_error.swigToEnum(godklsJNI.dkls_key_export_receiver_finish(Handle.getCPtr(session), session, tss_buffer.getCPtr(secret), secret));
  }

  public static lib_error dkls_key_exporter(Handle share, go_slice id, go_slice setup, tss_buffer message, tss_buffer receiver) {
    return lib_error.swigToEnum(godklsJNI.dkls_key_exporter(Handle.getCPtr(share), share, go_slice.getCPtr(id), id, go_slice.getCPtr(setup), setup, tss_buffer.getCPtr(message), message, tss_buffer.getCPtr(receiver), receiver));
  }

  public static lib_error dkls_key_import_initiator_new(go_slice private_key, SWIGTYPE_p_uint8_t threshold, go_slice ids, tss_buffer setup_msg, Handle session) {
    return lib_error.swigToEnum(godklsJNI.dkls_key_import_initiator_new(go_slice.getCPtr(private_key), private_key, SWIGTYPE_p_uint8_t.getCPtr(threshold), go_slice.getCPtr(ids), ids, tss_buffer.getCPtr(setup_msg), setup_msg, Handle.getCPtr(session), session));
  }

  public static lib_error dkls_key_importer_new(go_slice setup, go_slice id, Handle session) {
    return lib_error.swigToEnum(godklsJNI.dkls_key_importer_new(go_slice.getCPtr(setup), setup, go_slice.getCPtr(id), id, Handle.getCPtr(session), session));
  }

  public static lib_error dkls_keyshare_from_bytes(go_slice buf, Handle hnd) {
    return lib_error.swigToEnum(godklsJNI.dkls_keyshare_from_bytes(go_slice.getCPtr(buf), buf, Handle.getCPtr(hnd), hnd));
  }

  public static lib_error dkls_keyshare_to_bytes(Handle share, tss_buffer buf) {
    return lib_error.swigToEnum(godklsJNI.dkls_keyshare_to_bytes(Handle.getCPtr(share), share, tss_buffer.getCPtr(buf), buf));
  }

  public static lib_error dkls_keyshare_public_key(Handle share, tss_buffer buf) {
    return lib_error.swigToEnum(godklsJNI.dkls_keyshare_public_key(Handle.getCPtr(share), share, tss_buffer.getCPtr(buf), buf));
  }

  public static lib_error dkls_keyshare_key_id(Handle share, tss_buffer buf) {
    return lib_error.swigToEnum(godklsJNI.dkls_keyshare_key_id(Handle.getCPtr(share), share, tss_buffer.getCPtr(buf), buf));
  }

  public static lib_error dkls_keyshare_derive_child_public_key(Handle share, tss_buffer derivation_path_str, tss_buffer buf) {
    return lib_error.swigToEnum(godklsJNI.dkls_keyshare_derive_child_public_key(Handle.getCPtr(share), share, tss_buffer.getCPtr(derivation_path_str), derivation_path_str, tss_buffer.getCPtr(buf), buf));
  }

  public static lib_error dkls_keyshare_to_refresh_bytes(Handle share, tss_buffer refresh_share_bytes) {
    return lib_error.swigToEnum(godklsJNI.dkls_keyshare_to_refresh_bytes(Handle.getCPtr(share), share, tss_buffer.getCPtr(refresh_share_bytes), refresh_share_bytes));
  }

  public static lib_error dkls_refresh_share_from_bytes(tss_buffer buf, Handle hnd) {
    return lib_error.swigToEnum(godklsJNI.dkls_refresh_share_from_bytes(tss_buffer.getCPtr(buf), buf, Handle.getCPtr(hnd), hnd));
  }

  public static lib_error dkls_refresh_share_to_bytes(Handle share, tss_buffer buf) {
    return lib_error.swigToEnum(godklsJNI.dkls_refresh_share_to_bytes(Handle.getCPtr(share), share, tss_buffer.getCPtr(buf), buf));
  }

  public static lib_error dkls_keyshare_free(Handle share) {
    return lib_error.swigToEnum(godklsJNI.dkls_keyshare_free(Handle.getCPtr(share), share));
  }

  public static lib_error dkls_decode_key_id(go_slice setup, tss_buffer key_id) {
    return lib_error.swigToEnum(godklsJNI.dkls_decode_key_id(go_slice.getCPtr(setup), setup, tss_buffer.getCPtr(key_id), key_id));
  }

  public static lib_error dkls_decode_session_id(go_slice setup, tss_buffer message) {
    return lib_error.swigToEnum(godklsJNI.dkls_decode_session_id(go_slice.getCPtr(setup), setup, tss_buffer.getCPtr(message), message));
  }

  public static lib_error dkls_decode_message(go_slice setup, tss_buffer message) {
    return lib_error.swigToEnum(godklsJNI.dkls_decode_message(go_slice.getCPtr(setup), setup, tss_buffer.getCPtr(message), message));
  }

  public static lib_error dkls_decode_party_name(go_slice setup, SWIGTYPE_p_uint32_t index, tss_buffer message) {
    return lib_error.swigToEnum(godklsJNI.dkls_decode_party_name(go_slice.getCPtr(setup), setup, SWIGTYPE_p_uint32_t.getCPtr(index), tss_buffer.getCPtr(message), message));
  }

  public static lib_error dkls_sign_setupmsg_new(go_slice key_id, go_slice chain_path, go_slice message_hash, go_slice ids, tss_buffer setup_msg) {
    return lib_error.swigToEnum(godklsJNI.dkls_sign_setupmsg_new(go_slice.getCPtr(key_id), key_id, go_slice.getCPtr(chain_path), chain_path, go_slice.getCPtr(message_hash), message_hash, go_slice.getCPtr(ids), ids, tss_buffer.getCPtr(setup_msg), setup_msg));
  }

  public static lib_error dkls_finish_setupmsg_new(go_slice session_id, go_slice message_hash, go_slice ids, tss_buffer setup_msg) {
    return lib_error.swigToEnum(godklsJNI.dkls_finish_setupmsg_new(go_slice.getCPtr(session_id), session_id, go_slice.getCPtr(message_hash), message_hash, go_slice.getCPtr(ids), ids, tss_buffer.getCPtr(setup_msg), setup_msg));
  }

  public static lib_error dkls_sign_session_from_setup(go_slice setup, go_slice id, Handle share_or_presign, Handle hnd) {
    return lib_error.swigToEnum(godklsJNI.dkls_sign_session_from_setup(go_slice.getCPtr(setup), setup, go_slice.getCPtr(id), id, Handle.getCPtr(share_or_presign), share_or_presign, Handle.getCPtr(hnd), hnd));
  }

  public static lib_error dkls_sign_session_input_message(Handle session, go_slice message, SWIGTYPE_p_uint32_t finished) {
    return lib_error.swigToEnum(godklsJNI.dkls_sign_session_input_message(Handle.getCPtr(session), session, go_slice.getCPtr(message), message, SWIGTYPE_p_uint32_t.getCPtr(finished)));
  }

  public static lib_error dkls_sign_session_output_message(Handle session, tss_buffer message) {
    return lib_error.swigToEnum(godklsJNI.dkls_sign_session_output_message(Handle.getCPtr(session), session, tss_buffer.getCPtr(message), message));
  }

  public static lib_error dkls_sign_session_message_receiver(Handle session, go_slice message, SWIGTYPE_p_uint32_t index, tss_buffer receiver) {
    return lib_error.swigToEnum(godklsJNI.dkls_sign_session_message_receiver(Handle.getCPtr(session), session, go_slice.getCPtr(message), message, SWIGTYPE_p_uint32_t.getCPtr(index), tss_buffer.getCPtr(receiver), receiver));
  }

  public static lib_error dkls_sign_session_finish(Handle session, tss_buffer output) {
    return lib_error.swigToEnum(godklsJNI.dkls_sign_session_finish(Handle.getCPtr(session), session, tss_buffer.getCPtr(output), output));
  }

  public static lib_error dkls_sign_session_free(Handle session) {
    return lib_error.swigToEnum(godklsJNI.dkls_sign_session_free(Handle.getCPtr(session), session));
  }

}
